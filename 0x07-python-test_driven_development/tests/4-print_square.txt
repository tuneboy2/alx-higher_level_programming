============================
How to use 4-print_square.py
============================

``4-print_square(size)`` prints a square of size `size` using the '#' character

Numbers
========

	Argument is of type int

	>>> print_square = __import__('4-print_square').print_square
	>>> print_square(3)
	###
	###
	###

  ::
	Argument is a Negative Integer

	>>> print_square(-2)
	Traceback (most recent call last):
	ValueError: size must be >= 0

  :: 
	Argument is of type float
	
	>>> print_square(6.0)
	Traceback (most recent call last):
	TypeError: size must be an integer

  ::
	Argument is of type float and Negative

	>>> print_square(-6.0)
	Traceback (most recent call last):
	TypeError: size must be an integer


Non-Numbers
============

	Argument is not of type int

	>>> print_square("g")
	Traceback (most recent call last):
	TypeError: size must be an integer

	>>> print_square(None)
	Traceback (most recent call last):
	TypeError: size must be an integer

	>>> print_square() # doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	TypeError: 
	
	
